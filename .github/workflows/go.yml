name: Go CI

on:
  push:
    branches: [ main ] # Or your default branch
  pull_request:
    branches: [ main ] # Or your default branch

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.21' # Specify your Go version
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Get dependencies
      run: go mod download

    - name: Run unit tests and calculate coverage
      run: |
        go test -v -coverprofile=coverage.out -covermode=atomic ./...
        echo "Calculating total coverage..."
        # Calculate total coverage percentage from coverage.out
        COVERAGE=$(go tool cover -func=coverage.out | grep '^total:' | awk '{print $3}' | sed 's/%//')

        echo "Current code coverage is ${COVERAGE}%"

        if ! [[ "$COVERAGE" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
          echo "Error: Could not parse coverage percentage. Output was: [$COVERAGE]"
          # Display more info for debugging
          echo "Full output of 'go tool cover -func=coverage.out':"
          go tool cover -func=coverage.out
          exit 1
        fi

        # Ensure COVERAGE is not empty before using bc
        if [ -z "$COVERAGE" ]; then
            echo "Error: Coverage variable is empty after parsing."
            exit 1
        fi

        # Use bc for floating point comparison
        IS_BELOW_THRESHOLD=$(echo "${COVERAGE} < 98.0" | bc -l)
        if [ "$IS_BELOW_THRESHOLD" -eq 1 ]; then
          echo "Error: Code coverage is ${COVERAGE}%, which is below the required 98%."
          exit 1
        else
          echo "Code coverage of ${COVERAGE}% meets the 98% requirement."
        fi

    - name: Build the application
      run: go build -v -o myapp ./cmd/main.go # Adjust the output name and path as needed

    # Optional: Upload build artifact
    # - name: Upload build artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: myapp-binary
    #     path: myapp
